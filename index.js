const { template } = require('@babel/core');
const { fifaData } = require('./fifa.js')


/* GÃ¶rev 1: 
	Verilen datayÄ± parÃ§alayarak aÅŸaÄŸÄ±daki verileri (console.log-ing) elde ederek pratik yapÄ±n. 
	
	ðŸ’¡ Ä°PUCU: Ã–ncelikle datayÄ± filtrelemek isteyebilirsiniz */

//(a) 2014 DÃ¼nya kupasÄ± Finali Evsahibi takÄ±m ismi (dizide "Home Team Name" anahtarÄ±)
fifaData.forEach(item => {
	if (item["Year"] === 2014) {
		console.log(item["Home Team Name"]);

	}

})
//(b) 2014 DÃ¼nya kupasÄ± Finali Deplasman takÄ±m ismi  (dizide "Away Team Name" anahtarÄ±)
let final2014 = fifaData.filter(item => item.Year === 2014);

final2014.forEach(item => console.log(item["Away Team Name"]));


//(c) 2014 DÃ¼nya kupasÄ± finali Ev sahibi takÄ±m golleri (dizide "Home Team Goals" anahtarÄ±)




//(d)2014 DÃ¼nya kupasÄ± finali Deplasman takÄ±m golleri  (dizide "Away Team Goals" anahtarÄ±)

//(e) 2014 DÃ¼nya kupasÄ± finali kazananÄ±*/
console.clear();
let final2014Winner = final2014.map(element => {
	if (element["Home Team Goals"] > element["Away Team Goals"]) {
		return element["Home Team Name"];
	}
	else if (element["Away Team Goals"] > element["Home Team Goals"]) {
		return element["Away Team Name"];
	}
	else
		return element["Win conditions"].split(" win ")[0];

});
console.log("!!!");
console.log(final2014Winner[0]);

/*  GÃ¶rev 2: 
	Finaller adlÄ± fonksiyonu kullanarak aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. Bir dizi(array) olan Fifa datasÄ±nÄ± fonksiyonun birinci parametresi olarak alacak
	2. Sadece final maÃ§larÄ±nÄ± iÃ§eren nesnenin(object) datalarÄ±nÄ± filtreleyerek, bir dizi olarak dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU - verilen data iÃ§indeki nesnelerin(objects) "Stage" anahtarÄ±na bakmalÄ±sÄ±nÄ±z
*/

function Finaller(dataArray) {
	const finalGames = dataArray.filter(mac => mac.Stage === "Final");
	return finalGames;
}
console.log(Finaller(fifaData));

/*  GÃ¶rev 3: 
	Bir higher-order fonksiyonu olan Yillar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. fifaData dizisini(array) fonksiyonun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Finaller data setindeki tÃ¼m yÄ±llarÄ± iÃ§eren "years" adÄ±ndaki diziyi(array) dÃ¶ndÃ¼recek
	*/

function Yillar(dataArray, chooseFinalGames) {
	let finalGames = chooseFinalGames(dataArray);

	let yearsOfFinalGames = finalGames.map(mac => mac["Year"]);
	return yearsOfFinalGames;
}

console.log(Yillar(fifaData, Finaller));
/*  GÃ¶rev 4: 
	Bir higher-order fonksiyonunu olan Kazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:  
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Her final maÃ§Ä±nÄ±n kazananÄ±nÄ± (evsahibi ya da deplasman) belirleyecek
	ðŸ’¡ Ä°PUCU: Beraberlikler(ties) iÃ§in ÅŸimdilik endiÅŸelenmeyin (DetaylÄ± bilgi iÃ§in README dosyasÄ±na bakabilirsiniz.)
	4. TÃ¼m kazanan Ã¼lkelerin isimlerini iÃ§eren `kazananlar` adÄ±nda bir dizi(array) dÃ¶ndÃ¼recek(return)  */

function Kazananlar(dataArray, chooseFinalGames) {
	let finalGames = chooseFinalGames(dataArray);
	let winnersOfFinalGames = finalGames.map(element => {
		if (element["Home Team Goals"] > element["Away Team Goals"]) {
			return element["Home Team Name"];
		}
		else if (element["Away Team Goals"] > element["Home Team Goals"]) {
			return element["Away Team Name"];
		}
		else
			return element["Win conditions"].split(" win ")[0];

	});
	return winnersOfFinalGames;
}

console.log(Kazananlar(fifaData, Finaller));
//

/*  GÃ¶rev 5: 
	Bir higher-order fonksiyonu olan YillaraGoreKazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. GÃ¶rev 3'de yazdÄ±ÄŸÄ±nÄ±z Yillar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun Ã¼Ã§Ã¼ncÃ¼ parametresi olarak alacak
	4. GÃ¶rev 4'de yazdÄ±ÄŸÄ±nÄ±z Kazananlar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun dÃ¶rdÃ¼ncÃ¼ parametresi olarak alacak
	5. Her yÄ±l iÃ§in "{yÄ±l} yÄ±lÄ±nda, {Ã¼lke} dÃ¼nya kupasÄ±nÄ± kazandÄ±!" cÃ¼mlesini(string) iÃ§eren bir diziyi(array) dÃ¶ndÃ¼recek
	
	ðŸ’¡ Ä°PUCU: her cÃ¼mlenin adÄ±m 4'te belirtilen cÃ¼mleyle birebir aynÄ± olmasÄ± gerekmektedir.
*/

function YillaraGoreKazananlar(dataArray, chooseFinalGames, yearsArrayFunction, winnersOfFinalGamesFunction) {
	const finalGames = chooseFinalGames(dataArray);
	const result = finalGames.map((item, i) =>
		`${item["Year"]} yÄ±lÄ±nda, ${winnersOfFinalGamesFunction(dataArray, chooseFinalGames)[i]} dÃ¼nya kupasÄ±nÄ± kazandÄ±!`);
	return result;
	// 	let str = [];
	// 	for (let i = 0; i<finalGames.length; i++){
	// 		str.push(yearsArrayFunction(dataArray, chooseFinalGames)[i] + " yÄ±lÄ±nda, " 
	// + winnersOfFinalGamesFunction(dataArray, chooseFinalGames)[i] + " dÃ¼nya kupasÄ±nÄ± kazandÄ±!");
	// 	}
	// 	return str;
}
console.log(YillaraGoreKazananlar(fifaData, Finaller, Yillar, Kazananlar));

/*  GÃ¶rev 6: 
	Bir higher order fonksiyonu olan `OrtalamaGolSayisi` isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z `Finaller` fonksiyonunu birinci parametre olarak alacak; 'fifaData' dizisini argÃ¼man olarak eklediÄŸinizden emin olun
	
	ðŸ’¡ Ä°PUCU: Ã‡aÄŸÄ±rma Ã¶rneÄŸi: `OrtalamaGolSayisi(Finaller(fifaData));`
	
	2. Her maÃ§ iÃ§in Ortalama toplam evsahibi gol sayÄ±sÄ± ve toplam deplasman gol sayÄ±sÄ±nÄ± hesaplayacak (her maÃ§ta atÄ±lan toplam gol sayÄ±sÄ±)
	
	3. Sonucun 2. ondalÄ±ÄŸÄ±nÄ± yuvarlayÄ±p, bulunan deÄŸeri dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU: .reduce, .toFixed (dizilim(syntax) iÃ§in MDN'ye bakÄ±n) kullan, ve bunu 2 adÄ±mda yapÄ±n) 
	
*/

function OrtalamaGolSayisi(chooseFinalGames) {
	let sumOfTheGoals = chooseFinalGames.reduce((accumulator, mac) => accumulator + mac["Home Team Goals"] + mac["Away Team Goals"], 0);

	return (sumOfTheGoals / chooseFinalGames.length).toFixed(2);

}

console.log(OrtalamaGolSayisi(Finaller(fifaData)));

/// EKSTRA Ã‡ALIÅžMALAR ///

/*  BONUS 1:  
	`UlkelerinKazanmaSayilari` isminde bir fonksiyon oluÅŸturun, parametre olarak `data` ve `takÄ±m kÄ±saltmalarÄ±nÄ±` alacak ve hangi Ã¼lkenin kaÃ§ dÃ¼nya kupasÄ± olduÄŸunu dÃ¶ndÃ¼recek
	
	Ä°pucu: "takÄ±m kÄ±saltmalarÄ±" (team initials) iÃ§in datada araÅŸtÄ±rma yapÄ±n!
Ä°pucu: `.reduce` KullanÄ±n*/

function UlkelerinKazanmaSayilari(dataArray, abbreviation) {
	let winScore = 0;
	let requestedTeam ="";
	dataArray.forEach(item => {
		if (item["Home Team Initials"] === abbreviation)
		{
			requestedTeam = item["Home Team Name"].toLowerCase();
		}	
		else if (item["Away Team Initials"] === abbreviation)
		{
			requestedTeam = item["Away Team Name"].toLowerCase();
		}
			
	})

	dataArray.forEach(item => {
		if ((item["Home Team Goals"] > item["Away Team Goals"]) && item["Home Team Initials"] === abbreviation) {
			winScore++;
		}
		else if ((item["Away Team Goals"] > item["Home Team Goals"]) && item["Away Team Initials"] === abbreviation) {
			winScore++;
		}
		else if (item["Win conditions"].split(" win ")[0].toLowerCase() === requestedTeam) {
			winScore++;
		}
	})

	return winScore;

}

 console.log(UlkelerinKazanmaSayilari(fifaData, "FRA"));

/*  BONUS 2:  
EnCokGolAtan() isminde bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ± finallerinde en Ã§ok gol atan takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n */
console.clear();
function EnCokGolAtan(dataArray) {

	let homeTeamNames = [];
	dataArray.forEach(item => homeTeamNames.push(item["Home Team Name"]));
	let awayTeamNames = [];
	dataArray.forEach(item => homeTeamNames.push(item["Away Team Name"]));
	let teamNames = arrayUnique(homeTeamNames.concat(awayTeamNames));
	let goalObjects = [];
	let totalGoals = 0;
	let maxGoalTeam = "";
	for (let j = 0; j < dataArray.length; j++) {
		for (let i = 0; i < teamNames.length; i++) {
			if (dataArray[j]["Home Team Name"] === teamNames[i]) {

				let str1 = teamNames[i];
				let goals = dataArray[j]["Home Team Goals"];
				totalGoals += goals;
				let obj = {
					name: str1,
					goals: totalGoals
				}
				goalObjects.push(obj);

			}
			if (dataArray[j]["Away Team Name"] === teamNames[i]) {
				let str1 = teamNames[i];
				let goals = dataArray[j]["Away Team Goals"];
				totalGoals += goals;
				let obj = {
					name: str1,
					goals: totalGoals
				}
				goalObjects.push(obj);
			}
		}
	}
	for (let i = 0; i < goalObjects.length; i++) {
		let maxGoals = 0;
		let maxIndex = 0;
		if (goalObjects[i].goals > maxGoals) {
			maxGoals = goalObjects;
			maxGoalTeam = goalObjects[i].name;
		}
	}
	for (let i = 0; i < goalObjects.length; i++) {
		if (goalObjects[i]["name"] === "Netherlands")
			console.log(goalObjects[i]);
	}


	return maxGoalTeam;


}
function arrayUnique(array) {
	var a = array.concat();
	for (var i = 0; i < a.length; ++i) {
		for (var j = i + 1; j < a.length; ++j) {
			if (a[i] === a[j])
				a.splice(j--, 1);
		}
	}

	return a;
}
console.log(EnCokGolAtan(fifaData));

/*  BONUS 3: 
EnKotuDefans() adÄ±nda bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ±nda finallerinde en Ã§ok golÃ¼ yiyen takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n*/

function EnKotuDefans(dataArray) {
}
/* Hala vaktiniz varsa, README dosyasÄ±nda listelenen hedeflerden istediÄŸinizi aÅŸaÄŸÄ±daki boÅŸluÄŸa yazabilirsiniz. */


/* Bu satÄ±rÄ±n aÅŸaÄŸÄ±sÄ±ndaki kodlarÄ± lÃ¼tfen deÄŸiÅŸtirmeyin */
function sa() {
	console.log('Kodlar Ã§alÄ±ÅŸÄ±yor');
	return 'as';
}
sa();
module.exports = {
	sa,
	Finaller,
	Yillar,
	Kazananlar,
	YillaraGoreKazananlar,
	OrtalamaGolSayisi
}
